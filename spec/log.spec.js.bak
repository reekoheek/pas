describe('log', function() {
    'use strict';

    var log = require('../lib/log');

    describe('#writer', function() {
        describe('#out()', function() {
            it('should invoke console.log', function() {
                spyOn(console, 'log');
                log.writer.out('hello world');
                expect(console.log).toHaveBeenCalled();
            });
        });

        describe('#err()', function() {
            it('should invoke console.error', function() {
                spyOn(console, 'error');
                log.writer.err('hello world');
                expect(console.error).toHaveBeenCalled();
            });
        });

        describe('#format()', function() {
            it('should return string', function() {
                var result = log.writer.format('I', 'hello', 'name: %s', 'ganesha');
                expect(result).toEqual('HELLO    name: ganesha');
            });
        });
    });

    describe('#i()', function() {
        var oldFormat, oldOut;

        beforeEach(function() {
            oldFormat = log.writer.format;
            oldOut = log.writer.out;

            log.writer.format = function() {
                return Array.prototype.slice.call(arguments);
            };

            log.writer.out = function() {

            };
        });

        afterEach(function() {
            log.writer.format = oldFormat;
            log.writer.out = oldOut;
        });

        it ('should accept single arg default to out category', function() {
            spyOn(log.writer, 'out');

            log.i('hello');

            expect(log.writer.out).toHaveBeenCalledWith(['I', 'out', 'hello']);
        });

        it('should print string', function() {
            spyOn(log.writer, 'out');

            log.i('test', 'hello');

            expect(log.writer.out).toHaveBeenCalledWith(['I', 'test', 'hello']);
        });

        it('should print formatted string', function() {
            spyOn(log.writer, 'out');

            log.i('test', 'name: %s', 'ganesha');

            expect(log.writer.out).toHaveBeenCalledWith(['I', 'test', 'name: %s', 'ganesha']);
        });

        it('should print object', function() {
            spyOn(log.writer, 'out');

            var o = {name: 'ganesha'};
            log.i('test', o);

            expect(log.writer.out).toHaveBeenCalled();
        });
    });

    describe('#e()', function() {
        var oldFormat, oldErr;

        // beforeEach(function() {
        //     oldErr = log.writer.err;

        //     log.writer.err = function(e) {
        //         console.log(e)
        //     };
        // });

        // afterEach(function() {
        //     log.writer.err = oldErr;
        // });

        it ('should accept single arg default to err category', function() {
            spyOn(log.writer, 'err');

            log.e('hello');

            expect(log.writer.err).toHaveBeenCalledWith('ERROR    hello');
        });

        it('should accept error object', function() {
            spyOn(log.writer, 'err');

            log.e(new Error('An error occured'));

            expect(log.writer.err).toHaveBeenCalledWith('ERROR    An error occured');
        });
    });
});